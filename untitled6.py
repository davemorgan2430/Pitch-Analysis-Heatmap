# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CPPnqXoEimcrm_Nf137HYMSX-jOrHjse
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st

# Streamlit app title
st.title("Pitch Analysis Heatmap")

# CSV uploader
uploaded_file = st.file_uploader("angle.csv", type="csv")

if uploaded_file is not None:
    # Read the CSV file into a DataFrame
    aa = pd.read_csv(uploaded_file)

    # Streamlit user inputs for filtering
    selected_pitch = st.selectbox("Select the pitch type", aa['pitch_type'].unique())

    # Ask for the arm angle range
    min_arm_angle, max_arm_angle = aa['arm_angle'].min(), aa['arm_angle'].max()
    arm_angle_range = st.slider(
        "Select arm angle range",
        min_value=float(min_arm_angle),
        max_value=float(max_arm_angle),
        value=(float(min_arm_angle), float(max_arm_angle))
    )

    # Ask for handedness
    selected_handedness = st.selectbox(
        "Select handedness",
        aa['p_throws'].unique()
    )

    # Filter the DataFrame based on user input
    filtered_df = aa[
        (aa['pitch_type'] == selected_pitch) &
        (aa['arm_angle'] >= arm_angle_range[0]) &
        (aa['arm_angle'] <= arm_angle_range[1]) &
        (aa['p_throws'] == selected_handedness)
    ]

    # Print the pitchers in the filtered arm angle range
    pitchers_in_range = filtered_df['player_name'].unique()
    if len(pitchers_in_range) > 0:
        st.write("Pitchers in the selected arm angle range:")
        for pitcher in pitchers_in_range:
            st.write(f"- {pitcher}")
    else:
        st.write("No pitchers found in the selected arm angle range.")
        st.stop()

    # Ask the user to select a pitcher
    selected_pitcher = st.selectbox("Select a pitcher to highlight", pitchers_in_range)

    # Filter the data for the selected pitcher and calculate average HB and iVB
    pitcher_data = filtered_df[filtered_df['player_name'] == selected_pitcher]
    average_hb = pitcher_data['HB'].mean()
    average_ivb = pitcher_data['iVB'].mean()

    # Create a KDE plot with iVB and HB
    plt.figure(figsize=(10, 8))

    # Kernel Density Estimate plot
    sns.kdeplot(
        data=filtered_df,
        x='HB',
        y='iVB',
        fill=True,
        cmap='viridis',  # You can change this to any colormap you prefer
        thresh=0.05,     # Threshold for contours to appear
        levels=10,       # Number of contour levels
        cbar=True,       # Add color bar
    )

    # Add lines at x=0 and y=0
    plt.axhline(0, color='black', linestyle='--', linewidth=1, label='y=0')  # Horizontal line
    plt.axvline(0, color='black', linestyle='--', linewidth=1, label='x=0')  # Vertical line

    # Highlight the selected pitcher's average data point
    plt.scatter(
        average_hb,
        average_ivb,
        color='orange',
        s=100,
        label=f"{selected_pitcher} (Avg HB: {average_hb:.2f}, Avg iVB: {average_ivb:.2f})"
    )

    # Set labels and title
    plt.title(f"{selected_pitch} | {selected_handedness}-handed | Arm Angle: {arm_angle_range[0]:.1f}° - {arm_angle_range[1]:.1f}°", fontsize=16)
    plt.xlabel("Horizontal Break (HB)", fontsize=14)
    plt.ylabel("Induced Vertical Break (iVB)", fontsize=14)

    # Set x and y axis limits
    plt.xlim(-30, 30)
    plt.ylim(-30, 30)

    # Display the plot in Streamlit
    st.pyplot(plt)

else:
    st.write("Please upload a CSV file to begin.")
